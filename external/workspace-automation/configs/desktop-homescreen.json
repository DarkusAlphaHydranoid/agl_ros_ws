{
  "id": "desktop-homescreen",
  "load": true,
  "supported_archs": [
    "arm64",
    "x86_64"
  ],
  "supported_host_types": [
    "fedora",
    "ubuntu"
  ],
  "flutter_runtime": "debug",
  "type": "host",
  "env": {
    "HOMESCREEN_SRC_DIR": "${FLUTTER_WORKSPACE}/app/ivi-homescreen",
    "HOMESCREEN_BUILD_DIR": "${FLUTTER_WORKSPACE}/app/ivi-homescreen/build",
    "PLUGINS_DIR": "${FLUTTER_WORKSPACE}/app/ivi-homescreen-plugins/plugins",
    "FIREBASE_SRC_DIR": "${FLUTTER_WORKSPACE}/app/firebase-cpp-sdk",
    "FIREBASE_BUILD_DIR": "${FLUTTER_WORKSPACE}/app/firebase-cpp-sdk/cmake-build-release",
    "PLUGIN_FIREBASE": "-DBUILD_PLUGIN_CLOUD_FIRESTORE=OFF -DBUILD_PLUGIN_FIREBASE_AUTH=OFF -DBUILD_PLUGIN_FIREBASE_STORAGE=OFF -DFIREBASE_CPP_SDK_DIR=${FIREBASE_SRC_DIR} -DFIREBASE_SDK_LIBDIR=${FIREBASE_BUILD_DIR}",
    "PLUGIN_RIVE": "-DBUILD_PLUGIN_RIVE_TEXT=OFF",
    "RIVE_TEXT_LIB_DIR": "${FLUTTER_WORKSPACE}/app/rive-common/cmake-build-release",
    "PLUGIN_CAMERA": "-DBUILD_PLUGIN_CAMERA=OFF",
    "FILAMENT_INCLUDE_DIR": "${FLUTTER_WORKSPACE}/app/filament/cmake-build-release/staging/release/include",
    "FILAMENT_LINK_LIBRARIES_DIR": "${FLUTTER_WORKSPACE}/app/filament/cmake-build-release/staging/release/lib/x86_64",
    "FLUGIN_FILAMENT_VIEW": "-DBUILD_PLUGIN_FILAMENT_VIEW=ON -DFILAMENT_INCLUDE_DIR=${FILAMENT_INCLUDE_DIR} -DFILAMENT_LINK_LIBRARIES_DIR=${FILAMENT_LINK_LIBRARIES_DIR}",
    "PDFIUM_SRC_DIR": "${FLUTTER_WORKSPACE}/app/pdfium/pdfium",
    "PDFIUM_INCLUDE_DIR": "${PDFIUM_SRC_DIR}/public",
    "PDFIUM_LINK_LIBRARIES_DIR": "${PDFIUM_SRC_DIR}/out/Linux-Release",
    "PLUGIN_PDF": "-DBUILD_PLUGIN_PDF=OFF -DPDFIUM_INCLUDE_DIR=${PDFIUM_INCLUDE_DIR} -DPDFIUM_LINK_LIBRARIES_DIR=${PDFIUM_LINK_LIBRARIES_DIR}",
    "LIBWEBRTC_SRC_DIR": "${FLUTTER_WORKSPACE}/app/libwebrtc/src",
    "LIBWEBRTC_INC_DIR": "${LIBWEBRTC_SRC_DIR}/libwebrtc/include",
    "LIBWEBRTC_LIB_DIR": "${LIBWEBRTC_SRC_DIR}/out/Linux-Debug",
    "LIBWEBRTC_LIB": "${LIBWEBRTC_LIB_DIR}/libwebrtc.so",
    "PLUGIN_WEBRTC": "-DBUILD_PLUGIN_WEBRTC=OFF -DLIBWEBRTC_INC_DIR=${LIBWEBRTC_INC_DIR} -DLIBWEBRTC_LIB=${LIBWEBRTC_LIB}",
    "HOMESCREEN_CMAKE_ARGS": "-DCMAKE_BUILD_TYPE=Debug -DSANITIZE_ADDRESS=OFF -DENABLE_DLT=OFF -DBUILD_UNIT_TESTS=OFF -DBUILD_DOCS=OFF -DBUILD_CRASH_HANDLER=OFF -DLLVM_ROOT=/usr -DPLUGINS_DIR=${PLUGINS_DIR} -DENABLE_IVI_SHELL_CLIENT=OFF -DENABLE_XDG_CLIENT=ON -DENABLE_AGL_SHELL_CLIENT=OFF -DENABLE_LTO=ON -DDEBUG_PLATFORM_MESSAGES=OFF -DBUILD_BACKEND_WAYLAND_EGL=ON -DBUILD_BACKEND_WAYLAND_VULKAN=OFF -DBUILD_EGL_TRANSPARENCY=ON -DBUILD_EGL_ENABLE_3D=ON -DBUILD_EGL_ENABLE_MULTISAMPLE=ON -DBUILD_PLUGIN_FILAMENT_VIEW=ON -DBUILD_PLUGIN_NAV_RENDER_VIEW=ON -DBUILD_PLUGIN_LAYER_PLAYGROUND_VIEW=ON -DBUILD_PLUGIN_AUDIOPLAYERS_LINUX=OFF -DBUILD_PLUGIN_URL_LAUNCHER=ON -DBUILD_PLUGIN_FILE_SELECTOR=ON ${PLUGIN_CAMERA} -DBUILD_PLUGIN_GO_ROUTER=ON -DBUILD_PLUGIN_SECURE_STORAGE=ON -DBUILD_PLUGIN_DESKTOP_WINDOW_LINUX=ON ${PLUGIN_FIREBASE} ${PLUGIN_RIVE} ${PLUGIN_PDF} ${FLUGIN_FILAMENT_VIEW} ${PLUGIN_WEBRTC}",
    "HOMESCREEN_EXE": "LD_LIBRARY_PATH=${LIBWEBRTC_LIB_DIR}:${RIVE_TEXT_LIB_DIR} SPDLOG_LEVEL=debug ${HOMESCREEN_BUILD_DIR}/shell/homescreen -b ${PLATFORM_ID_DIR_RELATIVE}",
    "PING_CMD": "[ -n \"$WAYLAND_DISPLAY\" ] && echo \"Type=wayland\"",
    "CREATE_BUNDLE_FOLDER": "mkdir -p ${PLATFORM_ID_DIR_RELATIVE}/data",
    "COPY_PLATFORM_ID_TO_BUNDLE_FOLDER": "cp -r ${PLATFORM_ID_DIR}/config.toml ${PLATFORM_ID_DIR_RELATIVE}/",
    "COPY_BUNDLE_FOLDER_TO_PLATOFRM_ID": "cp -r ${BUNDLE_FOLDER}/* ${PLATFORM_ID_DIR_RELATIVE}/",
    "CREATE_ASSET_SYMLINK": "ln -rsf build/flutter_assets ${PLATFORM_ID_DIR_RELATIVE}/data/flutter_assets",
    "STAGE_BUNDLE_FOLDER": "${CREATE_BUNDLE_FOLDER} && ${COPY_PLATFORM_ID_TO_BUNDLE_FOLDER} && ${COPY_BUNDLE_FOLDER_TO_PLATOFRM_ID} && ${CREATE_ASSET_SYMLINK}"
  },
  "runtime": {
    "config": {
      "global": {"cursor_theme": "DMZ-White", "app_id": "homescreen"},
      "view": {"width": 1920, "height": 1080}
    },
    "pre-requisites": {
      "x86_64": {
        "ubuntu": {
          "cmds": [
            "sudo snap install cmake --classic",
            "pip3 install clang",
            "sudo add-apt-repository -y ppa:kisak/kisak-mesa",
            "sudo apt update -y",
            "sudo apt install lsb-release wget software-properties-common gnupg apt-file",
            "sudo apt update",
            "sudo apt install -y libwayland-dev wayland-protocols mesa-common-dev libegl1-mesa-dev libgles2-mesa-dev mesa-utils libxkbcommon-dev ninja-build",
            "sudo apt install -y build-essential libtool libsecret-1-dev libsdl2-dev libjpeg-dev zenity flatpak libflatpak-dev gnome-software-plugin-flatpak",
            "sudo apt install -y libllvm-ocaml-dev llvm llvm-dev llvm-runtime clang clang-tools libclang-dev libclang1 clang-format clangd clang-tidy lldb lld libc++-dev libc++abi-dev libunwind-dev libc++1 libc++abi1",
            "sudo apt autoremove -y",
            "sudo apt clean -y",
            "cmake --version",
            "apt-file search cmake",
            "sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo",
            "flatpak remotes"
          ]
        },
        "fedora": {
          "cmds": [
            "sudo dnf -y update",
            "sudo dnf -y upgrade",
            "sudo dnf -y install wayland-devel wayland-protocols-devel libxkbcommon-devel cmake ninja-build mesa-dri-drivers mesa-filesystem mesa-libEGL-devel mesa-libGL-devel mesa-libGLU-devel mesa-libgbm-devel mesa-libglapi mesa-libxatracker libunwind-devel gstreamer1-devel gstreamer1-plugins-base-devel gstreamer1-plugins-bad-free-devel gstreamer1-plugins-bad-free-extras gstreamer1-plugins-base-tools gstreamer1-plugins-good gstreamer1-plugins-good-extras gstreamer1-plugins-ugly-free",
            "sudo dnf -y install libcxx-devel libcxx-static libcxxabi-devel libcxxabi-static ninja-build lld libtool SDL2-devel libsecret-devel zenity",
            "sudo dnf -y autoremove",
            "cmake --version",
            "dnf provides cmake"
          ]
        }
      }
    },
    "post_cmds": [
      {
        "env": {
          "CC": "/usr/bin/clang",
          "CXX": "/usr/bin/clang++"
        },
        "cwd": "${HOMESCREEN_BUILD_DIR}",
        "cmds": [
          "cmake -GNinja ${HOMESCREEN_SRC_DIR} ${HOMESCREEN_CMAKE_ARGS}",
          "ninja homescreen"
        ]
      }
    ]
  },
  "overwrite-existing": true,
  "custom-device": {
    "id": "desktop-homescreen",
    "label": "Toyota homescreen",
    "sdkNameAndVersion": "homescreen x86_64",
    "platform": "linux-x64",
    "enabled": true,
    "ping": "bash -c \"${PING_CMD}\"",
    "pingSuccessRegex": "Type=wayland",
    "postBuild": "bash -c \"rm -rf ${PLATFORM_ID_DIR_RELATIVE}\"",
    "install": "bash -c \"${STAGE_BUNDLE_FOLDER}\"",
    "uninstall": "bash -c \"rm -rf ${PLATFORM_ID_DIR_RELATIVE}\"",
    "runDebug": "bash -c \"${HOMESCREEN_EXE}\"",
    "forwardPort": null,
    "forwardPortSuccessRegex": null,
    "screenshot": null
  }
}