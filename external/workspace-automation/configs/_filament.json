{
    "id": "filament",
    "load": true,
    "supported_archs": [
        "x86_64"
    ],
    "supported_host_types": [
        "ubuntu",
        "fedora"
    ],
    "type": "generic",
    "flutter_runtime": "debug",
    "env": {
        "CMAKE_BUILD_TYPE": "Release",
        "PATCH_FOLDER": "${FLUTTER_WORKSPACE}/patches",
        "FILAMENT_SRC_DIR": "${FLUTTER_WORKSPACE}/app/filament",
        "FILAMENT_BUILD_DIR": "${FLUTTER_WORKSPACE}/app/filament/cmake-build-release",
        "FILAMENT_STAGING_DIR": "${FILAMENT_BUILD_DIR}/staging/release",
        "FILAMENT_CMAKE_ARGS": "-DFILAMENT_SUPPORTS_VULKAN=ON -DFILAMENT_ENABLE_LTO=ON -DFILAMENT_SUPPORTS_OPENGL=OFF -DFILAMENT_USE_EXTERNAL_GLES3=OFF -DFILAMENT_SUPPORTS_WAYLAND=ON -DFILAMENT_SUPPORTS_X11=OFF -DFILAMENT_SUPPORTS_XCB=OFF -DFILAMENT_SUPPORTS_EGL_ON_LINUX=OFF -DFILAMENT_SKIP_SDL2=ON -DFILAMENT_SKIP_SAMPLES=ON -DFILAMENT_USE_SWIFTSHADER=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_STAGING_PREFIX=${FILAMENT_STAGING_DIR} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}",
        "PLAYX_3D_SCENE_SRC_DIR": "${FLUTTER_WORKSPACE}/app/playx-3d-scene"
    },
    "runtime": {
        "pre-requisites": {
            "x86_64": {
                "ubuntu": {
                    "cmds": [
                        "sudo snap install cmake --classic",
                        "pip3 install clang absl-py",
                        "sudo add-apt-repository -y ppa:kisak/kisak-mesa",
                        "sudo apt update -y",
                        "sudo apt install lsb-release wget software-properties-common gnupg apt-file",
                        "sudo apt update",
                        "sudo apt install -y libwayland-dev wayland-protocols mesa-common-dev libegl1-mesa-dev libgles2-mesa-dev mesa-utils libxkbcommon-dev ninja-build",
                        "sudo apt install -y build-essential libtool libsecret-1-dev libsdl2-dev libjpeg-dev zenity",
                        "sudo apt install -y libllvm-ocaml-dev llvm llvm-dev llvm-runtime clang clang-tools libclang-dev libclang1 clang-format clangd clang-tidy lldb lld libc++-dev libc++abi-dev libunwind-dev libc++1 libc++abi1",
                        "sudo apt autoremove -y",
                        "sudo apt clean -y",
                        "cmake --version",
                        "apt-file search cmake"
                    ]
                },
                "fedora": {
                    "cmds": [
                        "sudo dnf -y update",
                        "sudo dnf -y upgrade",
                        "sudo dnf -y install wayland-devel wayland-protocols-devel libxkbcommon-devel cmake ninja-build mesa-dri-drivers mesa-filesystem mesa-libEGL-devel mesa-libGL-devel mesa-libGLU-devel mesa-libgbm-devel mesa-libglapi mesa-libxatracker",
                        "sudo dnf -y install libcxx-devel libcxx-static libcxxabi-devel libcxxabi-static libunwind-devel ninja-build lld libtool SDL2-devel libsecret-devel",
                        "pip3 install absl-py",
                        "sudo dnf -y autoremove",
                        "cmake --version",
                        "dnf provides cmake"
                    ]
                }
            }
        },
        "post_cmds": [
            {
                "cwd": "${FILAMENT_SRC_DIR}",
                "cmds": [
                    "git reset --hard",
                    "git apply ${PATCH_FOLDER}/filament/0001-error-ignoring-return-value-of-function-declared-wit.patch",
                    "git apply ${PATCH_FOLDER}/filament/0002-disable-backend-tests.patch",
                    "git apply ${PATCH_FOLDER}/filament/0003-install-required-files.patch",
                    "git apply ${PATCH_FOLDER}/filament/0004-move-include-contents-to-include-filament.patch",
                    "git apply ${PATCH_FOLDER}/filament/0005-move-libraries-so-they-install.patch"
                ]
            },
            {
                "env": {
                    "CC": "/usr/bin/clang",
                    "CXX": "/usr/bin/clang++"
                },
                "cwd": "${FILAMENT_BUILD_DIR}",
                "cmds": [
                  "cmake ${FILAMENT_SRC_DIR} ${FILAMENT_CMAKE_ARGS}",
                  "make install -j"
                ]
            }
        ]
    }
}